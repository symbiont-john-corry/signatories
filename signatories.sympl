# Signature is applied to a Contract by one of the Contract's parties

schema Signature:
    contract_channel: ChannelName
    party: KeyAlias
    created_at: Timestamp
# Contract is an agreement that can be entered into by parties.

schema Contract:
    channel: ChannelName
    text: str
    creator: str
    parties: List[KeyAlias]
    signatures: List[Signature]
CONTRACT_PREFIX : str = "CON"

@clientside
def contract(channel: ChannelName) -> Contract:
    contract = cvm.storage.get(channel, ContractStatic, Identifier(channel))
    if isinstance(contract, None):
        cvm.error(f"unable to retrieve contract on channel {channel}")
    return contract

@clientside
def contract_create(text: str) -> None:
    cvm.job_start()
    ch : ChannelName = cvm.new_channel(CONTRACT_PREFIX)
    creator : str = cvm.tx.key_alias
    # Write the Contract to private persistent store
    parties : List[KeyAlias] = []
    signatures : List[Signature] = []
    contract = Contract(channel = ch
                       , text = text
                       , creator = creator
                       , parties = parties
                       , signatures = signatures)
    with PostTxArgs(ch):
        _contract_save(contract)

@executable
def _contract_save(contract: Contract) -> None:
    cvm.storage.put(contract.channel, contract)
    cvm.job_complete(std.json(contract))

@clientside
def contract_add_party(channel: ChannelName, ka: KeyAlias) -> None:
    contract = cvm.storage.get(channel, ContractStatic, Identifier(channel))
    parties : List[KeyAlias] = []
    if isinstance(contract, None):
        cvm.error(f"unable to retrieve contract on channel {channel}")
    if isinstance(contract, Contract):
        parties = contract.parties
        parties += [ka]
        contract.parties : List[KeyAlias] = parties
        # invite party to channel
        cvm.add_owner(contract.channel, ka)
        with PostTxArgs(contract.channel):
            _contract_save(contract)

@clientside
def contract_sign(channel: ChannelName) -> None:
    contract = cvm.storage.get(channel, ContractStatic, Identifier(channel))
    if isinstance(contract, None):
        cvm.error(f"unable to retrieve contract on channel {channel}")
    if isinstance(contract, Contract):
        # Check that the signer is a party
        signer = ""
        for p in contract.parties:
            if str(p) == str(cvm.tx.key_alias):
                signer = p
        if signer == "":
            cvm.error(f"party not found in Contract: {cvm.tx.key_alias}")
        signer_ka = KeyAlias(signer)
        if isinstance(signer_ka, KeyAlias):
            with PostTxArgs(channel):
                _contract_sign(contract, signer_ka)

@executable
def _contract_sign(contract: Contract, party: KeyAlias) -> None:
    sig : Signature = Signature(contract_channel = contract.channel
                               , party = party
                               , created_at = 0)
    sigs : List[Signature] = []
    sigs = contract.signatures
    sigs += sig
    contract.signatures = sigs
    cvm.storage.put(contract.channel, contract)
