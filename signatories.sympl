# Signature is applied to a Contract by one of the Contract's parties

schema Signature:
    id: Identifier
    contract_id: Identifier
    party: KeyAlias
    created_at: DateTime
# Contract is an agreement that can be entered into by parties.

schema Contract:
    id: str
    text: str
    creator: str
    parties: Optional[List[KeyAlias]]
    signatures: Optional[List[Signature]]
# ContractChannel is stored on PUBLIC and is where ChannelName where a Contract is
# stored are looked up

schema ContractChannel:
    contract_id: Identifier
    channel: ChannelName
CONTRACT_PREFIX : str = "CONTRACT"

@clientside
def contract() -> None:
    return None

@clientside
def contract_create(text: str) -> None:
    cvm.job_start()
    ch : ChannelName = cvm.new_channel(CONTRACT_PREFIX)
    with PostTxArgs(ch):
        _contract_create(text)

@executable
def _contract_create(text: str) -> None:
    channel : ChannelName = cvm.tx.write_channel
    id = cvm.generate_id(CONTRACT_PREFIX)
    creator : str = cvm.tx.key_alias
    contract = cvm.storage.get(channel, ContractStatic, id)
    if isinstance(contract, None):
        # Write the Contract to private persistent store
        new_contract = Contract(id = id
                               , text = text
                               , creator = creator
                               , parties = None
                               , signatures = None)
        cvm.storage.put(id, new_contract)
        # Write to the public ContractChannel map
        contract_channel = ContractChannel(contract_id = id, channel = channel)
        cvm.storage.put(PUBLIC, contract_channel)
        cvm.job_complete(std.json(new_contract))
    else:
        cvm.error(f"Contract already exists, ID: {id}")

@clientside
def contract_add_party() -> None:
    return None

@clientside
def contract_sign() -> None:
    return None
