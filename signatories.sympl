# Signature is applied to a Contract by one of the Contract's parties

schema Signature:
    id: Identifier
    contract_id: Identifier
    party: KeyAlias
    created_at: DateTime
# Contract is an agreement that can be entered into by parties.

schema Contract:
    channel: ChannelName
    text: str
    creator: str
    parties: Optional[List[KeyAlias]]
    signatures: Optional[List[Signature]]
CONTRACT_PREFIX : str = "CON"

@clientside
def contract(channel: ChannelName) -> None:
    cvm.job_start()
    # get the contract channel name from the public ContractChannel store
    # look up the contract itself
    with PostTxArgs(PUBLIC):
        _get_contract(channel)

@clientside
def contract_create(text: str) -> None:
    cvm.job_start()
    ch : ChannelName = cvm.new_channel(CONTRACT_PREFIX)
    creator : str = cvm.tx.key_alias
    # Write the Contract to private persistent store
    contract = Contract(channel = ch
                       , text = text
                       , creator = creator
                       , parties = None
                       , signatures = None)
    with PostTxArgs(ch):
        _contract_create(contract)

@executable
def _contract_create(contract: Contract) -> None:
    cvm.storage.put(contract.channel, contract)
    cvm.job_complete(std.json(contract))

@executable
def _get_contract(channel: ChannelName) -> None:
    contract = cvm.storage.get(channel, ContractStatic, Identifier(channel))
    if isinstance(contract, None):
        cvm.error(f"unable to retrieve contract on channel {channel}")
    cvm.job_complete(std.json(contract))

@clientside
def contract_add_party() -> None:
    return None

@clientside
def contract_sign() -> None:
    return None
